cmake_minimum_required(VERSION 2.6)
project(thread_factorial_tests)

################################
# GTest
################################
# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
                 EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
  include_directories("${gtest_SOURCE_DIR}/include")
endif()


################################
# Unit Tests script sources
################################
include_directories(${PROJECT_SOURCE_DIR})
# Add test cpp file
set(PROJ_SOURCES
	../src/factorial_thread.cpp
    )
    
set(PROJ_LIBS
	gtest_main
    )




set (target_name ${PROJECT_NAME})
# add_library(${target_name} SHARED ${PROJ_SOURCES})
add_executable(${target_name} test_factorial.cpp ${PROJ_SOURCES})
target_link_libraries(${target_name} ${PROJ_LIBS})

################################
# CTest
################################
# enable_testing()
# OR
include(CTest)

# Adding test: to add tests to the project:
# add_test(testname Exename arg1 arg2 ...)
add_test(NAME factorial_test COMMAND ${target_name})


# more tests to generate proper ctest report
set (target_name test_factorial_0_thread)
add_executable(${target_name} ${target_name}.cpp ${PROJ_SOURCES})
target_link_libraries(${target_name} ${PROJ_LIBS})
add_test(NAME ${target_name} COMMAND ${target_name})

set (target_name test_factorial_2_threads)
add_executable(${target_name} ${target_name}.cpp ${PROJ_SOURCES})
target_link_libraries(${target_name} ${PROJ_LIBS})
add_test(NAME ${target_name} COMMAND ${target_name})

set (target_name test_factorial_4_threads)
add_executable(${target_name} ${target_name}.cpp ${PROJ_SOURCES})
target_link_libraries(${target_name} ${PROJ_LIBS})
add_test(NAME ${target_name} COMMAND ${target_name})

# install(TARGETS ${target_name} DESTINATION usr/lib)
